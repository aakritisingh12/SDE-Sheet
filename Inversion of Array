int inv_count = 0;

void merge(vector<int> &a, long low, int mid, int high) {
    int m = mid-low+1, n = high-mid;
    vector<int> left(m);
    vector<int> right(n);
    for(int i=0; i<m; i++)    left[i] = a[low+i];
    for(int i=0; i<n; i++)    right[i] = a[mid+1+i];
    int i=0, j=0, k=low;
    
    while(i<m && j<n) {
        if(left[i] <= right[j]) 
            a[k++] = left[i++];
        
        else {
            a[k++] = right[j++];
            inv_count+=(m-i);
        }
    }
    while(i<m) 
        a[k++] = left[i++];
     
    while(j<n)
        a[k++] = right[j++];

}

void mergeSort(vector<int> &arr, int l, int r) {
    long m;
    if(r>l) {
        m = l+(r-l)/2;
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
        merge(arr, l, m, r);
    }
}

int Solution::countInversions(vector<int> &A) {
    inv_count = 0;
    mergeSort(A, 0, A.size()-1);
    return inv_count;
}
