/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(head == NULL || head->next == NULL) {
            return head;
        }
        int n = 0;
        ListNode *curr = head;
        while(curr != NULL) {
            n++;
            curr = curr->next;
        }
        // if(k > n)
        k = k%n;
        if(k == n || k == 0) {
            return head;
        }
        else {
            ListNode* nd = new ListNode();
            nd->next = head;
            ListNode *temp = NULL, *slow = head, *fast = head;
            while(k--) {
                fast = fast->next;
            }
            while(fast->next != NULL) {
                slow = slow->next;
                fast = fast->next;
            }
            temp = slow->next;
            slow->next = NULL;
            fast->next = head;
            return temp;
        }
    }
};
